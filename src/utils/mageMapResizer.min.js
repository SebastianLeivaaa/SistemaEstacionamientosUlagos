const imageMapResize = () => {
    "use strict";

    const resizeMap = () => {
        const calculateCoords = (coords, scaleFactor) => {
            const padding = {
                width: parseInt(window.getComputedStyle(img).getPropertyValue("padding-left"), 10),
                height: parseInt(window.getComputedStyle(img).getPropertyValue("padding-top"), 10)
            };

            return coords.split(",").map((coord, index) => {
                const dimension = index % 2 === 0 ? "width" : "height";
                return padding[dimension] + Math.floor(Number(coord) * scaleFactor[dimension]);
            }).join(",");
        };

        const parseCoords = (coords) => {
            return coords.replace(/ *, */g, ",").replace(/ +/g, ",");
        };

        const delayedResize = () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(resize, 250);
        };

        const getMapElement = (mapName) => {
            return document.querySelector(`img[usemap="${mapName}"]`);
        };

        const mapElement = this;
        let areas = null;
        let coords = null;
        let img = null;
        let resizeTimeout = null;

        if (typeof mapElement._resize !== "function") {
            areas = mapElement.getElementsByTagName("area");
            coords = Array.prototype.map.call(areas, parseCoords);
            img = getMapElement(`#${mapElement.name}`) || getMapElement(mapElement.name);

            mapElement._resize = resize;
            img.addEventListener("load", resize, false);
            window.addEventListener("focus", resize, false);
            window.addEventListener("resize", delayedResize, false);
            window.addEventListener("readystatechange", resize, false);
            document.addEventListener("fullscreenchange", resize, false);

            if (!(img.width === img.naturalWidth && img.height === img.naturalHeight)) {
                resize();
            }
        } else {
            mapElement._resize();
        }

        function resize() {
            const scaleFactor = {
                width: img.width / img.naturalWidth,
                height: img.height / img.naturalHeight
            };

            coords.forEach((coord, index) => {
                const coordsArray = coord.split(",");
                areas[index].coords = calculateCoords(coordsArray, scaleFactor);
            });
        }
    };

    const processMaps = () => {
        const resizeMapElement = (element) => {
            if (!element.tagName) {
                throw new TypeError("Object is not a valid DOM element");
            }
            if (element.tagName.toUpperCase() !== "MAP") {
                throw new TypeError(`Expected <MAP> tag, found <${element.tagName}>.`);
            }
            resizeMap.call(element);
            mapElements.push(element);
        };

        let mapElements = [];

        return (element) => {
            mapElements = [];
            switch (typeof element) {
                case "undefined":
                case "string":
                    Array.prototype.forEach.call(document.querySelectorAll(element || "map"), resizeMapElement);
                    break;
                case "object":
                    resizeMapElement(element);
                    break;
                default:
                    throw new TypeError(`Unexpected data type (${typeof element}).`);
            }
            return mapElements;
        };
    };

    if (typeof define === "function" && define.amd) {
        define([], processMaps);
    } else if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = processMaps();
    } else {
        window.imageMapResize = processMaps();
    }

    if ("jQuery" in window) {
        window.jQuery.fn.imageMapResize = function () {
            return this.filter("map").each(resizeMap).end();
        };
    }
};

export default imageMapResize;
